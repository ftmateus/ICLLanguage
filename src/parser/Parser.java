/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import ast.*;
import ast.relational.*;
import ast.logical.*;
import ast.arithmetic.*;
import ast.memory.*;
import ast.methods.*;
import env.*;
import java.util.ArrayList;
import java.util.List;

/** ID lister. */
public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {
  ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
    case DECL:
    case IF:
    case VAR:
    case BOOL:
    case PRINT:
    case PRINTLN:
    case WHILE:
    case NOT:
    case Id:
    case PLUS:
    case MINUS:
    case LPAR:
    case GET:
      t = Define();
    {if (true) return t;}
      break;
    case 0:
      jj_consume_token(0);
    {if (true) return new ASTExit();}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Define() throws ParseException {
  ASTNode t, function;
  Token id, type;
  List < Binding > bindings = new ArrayList < Binding > ();
  List < Function > functions = new ArrayList < Function > ();
  Function current;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(DECL);
      id = jj_consume_token(Id);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TWODOTS:
        jj_consume_token(TWODOTS);
        type = jj_consume_token(TYPE);
        jj_consume_token(BIND);
        t = Seq();
        jj_consume_token(ENDEXP);
        bindings.add(new Binding(id.image, t, type.image));
        break;
      case LPAR:
        jj_consume_token(LPAR);
        current = new Function(id.image);
        id = jj_consume_token(Id);
        jj_consume_token(TWODOTS);
        type = jj_consume_token(TYPE);
        current.addParameter(id.image, type.image);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          id = jj_consume_token(Id);
          jj_consume_token(TWODOTS);
          type = jj_consume_token(TYPE);
          current.addParameter(id.image, type.image);
        }
        jj_consume_token(RPAR);
        jj_consume_token(TWODOTS);
        type = jj_consume_token(TYPE);
        current.setReturnType(type.image);
        jj_consume_token(BIND);
        function = Seq();
        jj_consume_token(ENDEXP);
        current.setBody(function);
        functions.add(current);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = Seq();
    jj_consume_token(ENDEXP);
    {if (true) return new ASTGlobal(bindings, functions, t);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Seq() throws ParseException {
  ASTNode t1, t2;
    t1 = Assign();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEQ:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(SEQ);
      t2 = Assign();
      t1 = new ASTSeq(t1, t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Assign() throws ParseException {
  ASTNode t1, t2;
    t1 = OrExp();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(ASSIGN);
      t2 = OrExp();
      t1 = new ASTAssign(t1, t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode OrExp() throws ParseException {
  ASTNode t1, t2;
  Token op;
    t1 = AndExp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      op = jj_consume_token(OR);
      t2 = AndExp();
      t1 = new ASTOr(t1, t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode AndExp() throws ParseException {
  ASTNode t1, t2;
  Token op;
    t1 = Comp();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      op = jj_consume_token(AND);
      t2 = Comp();
      t1 = new ASTAnd(t1, t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Comp() throws ParseException {
  ASTNode t1, t2;
  Token op;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NE:
    case LE:
    case LT:
    case GT:
    case GE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        op = jj_consume_token(GT);
        break;
      case LT:
        op = jj_consume_token(LT);
        break;
      case EQ:
        op = jj_consume_token(EQ);
        break;
      case GE:
        op = jj_consume_token(GE);
        break;
      case LE:
        op = jj_consume_token(LE);
        break;
      case NE:
        op = jj_consume_token(NE);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp();
      switch (op.kind)
      {
        case EQ : t1 = new ASTEq(t1, t2);
        break;
        case GT : t1 = new ASTGt(t1, t2);
        break;
        case GE : t1 = new ASTGe(t1, t2);
        break;
        case LT : t1 = new ASTLt(t1, t2);
        break;
        case LE : t1 = new ASTLe(t1, t2);
        break;
        case NE : t1 = new ASTNe(t1, t2);
        break;
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  ASTNode t1, t2;
  Token op;
    t1 = Term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
      if (op.kind == MINUS)
      t1 = new ASTSub(t1, t2);
      else t1 = new ASTPlus(t1, t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
  ASTNode t1, t2;
  Token op;
    t1 = Fact();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REM:
      case DIV:
      case TIMES:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        op = jj_consume_token(TIMES);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        break;
      case REM:
        op = jj_consume_token(REM);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Fact();
      if (op.kind == TIMES)
      t1 = new ASTTimes(t1, t2);
      else if (op.kind == DIV)
      t1 = new ASTDiv(t1, t2);
      else
      t1 = new ASTRemainder(t1, t2);
    }
    {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {
  ASTNode t1, t;
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
    {if (true) return new ASTNum(Integer.parseInt(n.image));}
      break;
    case BOOL:
      n = jj_consume_token(BOOL);
    {if (true) return new ASTBool(Boolean.parseBoolean(n.image));}
      break;
    case NOT:
      n = jj_consume_token(NOT);
      t = Assign();
    {if (true) return new ASTNot(t);}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t = Seq();
      jj_consume_token(RPAR);
    {if (true) return t;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t = Fact();
    {if (true) return new ASTTimes(new ASTNum(- 1), t);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      t = Fact();
    {if (true) return t;}
      break;
    case DECL:
      t1 = DefIn();
    {if (true) return t1;}
      break;
    case IF:
      t1 = IfThenElse();
    {if (true) return t1;}
      break;
    case WHILE:
      t1 = While();
    {if (true) return t1;}
      break;
    case VAR:
      jj_consume_token(VAR);
      t = Fact();
    {if (true) return new ASTVar(t);}
      break;
    case GET:
      jj_consume_token(GET);
      t = Fact();
    {if (true) return new ASTDeref(t);}
      break;
    case PRINT:
    case PRINTLN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        jj_consume_token(PRINT);
        break;
      case PRINTLN:
        jj_consume_token(PRINTLN);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = Assign();
    {if (true) return new ASTPrint(t);}
      break;
    case Id:
      t1 = Id();
    {if (true) return t1;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode DefIn() throws ParseException {
  ASTNode t1, t;
  Token n, n1;
  List < Binding > bindings = new ArrayList < Binding > ();
    jj_consume_token(DECL);
    label_9:
    while (true) {
      n = jj_consume_token(Id);
      jj_consume_token(TWODOTS);
      n1 = jj_consume_token(TYPE);
      jj_consume_token(BIND);
      t = Seq();
      bindings.add(new Binding(n.image, t, n1.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(IN);
    t1 = Seq();
    jj_consume_token(END);
    {if (true) return new ASTDef(bindings, t1);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode IfThenElse() throws ParseException {
  ASTNode t1, t2, t;
  Token n;
    jj_consume_token(IF);
    t = Seq();
    jj_consume_token(THEN);
    t1 = Seq();
    jj_consume_token(ELSE);
    t2 = Seq();
    jj_consume_token(END);
    {if (true) return new ASTIf(t, t1, t2);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode While() throws ParseException {
  ASTNode t1, t;
  Token n;
    jj_consume_token(WHILE);
    t = Seq();
    jj_consume_token(DO);
    t1 = Seq();
    jj_consume_token(END);
    {if (true) return new ASTWhile(t, t1);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Id() throws ParseException {
  ASTNode t;
  Token id;
  List < ASTNode > nodes = new ArrayList < ASTNode > ();
    id = jj_consume_token(Id);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      jj_consume_token(LPAR);
      t = Seq();
      nodes.add(t);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        t = Seq();
        nodes.add(t);
      }
      jj_consume_token(RPAR);
      {if (true) return new ASTFun(id.image, nodes);}
    }
    {if (true) return new ASTId(id.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x5c1f261,0x40,0x0,0x0,0x0,0x0,0x200000,0x100000,0xc0000000,0xc0000000,0x5000000,0x5000000,0x1a000000,0x1a000000,0xc000,0x5c1f260,0x800000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x50,0x0,0x800,0x410,0x100,0x200,0x0,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x50,0x0,0x10,0x800,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
